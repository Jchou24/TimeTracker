// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTracker.DAL;

namespace TimeTracker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201223040510_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Auth.MapUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserRolesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("UserId", "UserRolesId");

                    b.HasIndex("UserRolesId");

                    b.ToTable("MapUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            UserRolesId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 2,
                            UserRolesId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 3,
                            UserRolesId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            UserRolesId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountStatus = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@auth.com",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Admin",
                            PasswordHash = "$MYHASH$V1$10000$QNfbryMVH4/NtgniuzQy2hU8EIclMgA3kHT2vAjg9cr4O8Dk",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AccountStatus = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@auth.com",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "User",
                            PasswordHash = "$MYHASH$V1$10000$4iD4Ab5Z+nwCj5QpRoSRQ07iZ/dCZjriZ+TAa1b5fVYA+tyc",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AccountStatus = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test@auth.com",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Test",
                            PasswordHash = "$MYHASH$V1$10000$zrh46ZLlGqzln9eQ8uOQN7yvUde17uCWc7xKlZ1tVtad3FLc",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AccountStatus = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test2@auth.com",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Test2",
                            PasswordHash = "$MYHASH$V1$10000$Xx63Yky8pmBz3DhPHYuyPV+MY/5sTfaLt8KMHX5gM5RLtI7V",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Auth.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("CodeName")
                        .IsUnique();

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodeName = "Admin",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Admin",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CodeName = "User",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "User",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.DayWorkLimitTime", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<double>("LimitWorkTime")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Guid");

                    b.ToTable("DayWorkLimitTime");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("0eff278d-f5d8-48c2-ae77-b1c7831fadcd"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LimitWorkTime = 7.5,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.NonWorkDays", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("NonWorkDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Guid");

                    b.ToTable("NonWorkDays");
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.Period", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Guid");

                    b.ToTable("Period");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("b52ae551-5541-4894-b1f3-675d6594a963"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2020, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Test1",
                            StartDate = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.Task", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ConsumeTime")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("TaskContent")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("TaskDayGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("TaskSourceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Guid");

                    b.HasIndex("TaskDayGuid");

                    b.HasIndex("TaskSourceGuid");

                    b.HasIndex("TaskTypeGuid");

                    b.ToTable("Task");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("c1e81b33-8819-4e12-be9b-8a494748b644"),
                            ConsumeTime = 4.0,
                            Date = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            TaskContent = "Architecture design",
                            TaskDayGuid = new Guid("9c903286-0816-4800-a04c-a04774f2e9d9"),
                            TaskName = "Track Time",
                            TaskSourceGuid = new Guid("05d51407-4082-4746-a816-463106f68f1a"),
                            TaskTypeGuid = new Guid("7e8aef7a-3a2d-4023-b330-17b02c6f043f")
                        },
                        new
                        {
                            Guid = new Guid("8c74bd17-2f8d-4c46-be24-be446fbd44d4"),
                            ConsumeTime = 3.0,
                            Date = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 1,
                            TaskContent = "",
                            TaskDayGuid = new Guid("9c903286-0816-4800-a04c-a04774f2e9d9"),
                            TaskName = "FEZ",
                            TaskSourceGuid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            TaskTypeGuid = new Guid("4f3acf7f-7cc4-4a76-bd07-7bbeabd2882a")
                        },
                        new
                        {
                            Guid = new Guid("a52433ff-268f-41f7-a0bb-2cdb409ab696"),
                            ConsumeTime = 3.0,
                            Date = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            TaskContent = "AAAAA",
                            TaskDayGuid = new Guid("0232dc59-fca7-415c-ab8d-354a3efe39d0"),
                            TaskName = "",
                            TaskSourceGuid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            TaskTypeGuid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9")
                        },
                        new
                        {
                            Guid = new Guid("0db027e5-2cba-478e-91f4-ab62eb3b01e4"),
                            ConsumeTime = 0.0,
                            Date = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 1,
                            TaskContent = "",
                            TaskDayGuid = new Guid("0232dc59-fca7-415c-ab8d-354a3efe39d0"),
                            TaskName = "BBBBBB",
                            TaskSourceGuid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            TaskTypeGuid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9")
                        },
                        new
                        {
                            Guid = new Guid("a13a6b6a-914e-4605-b13e-e2a97781b26e"),
                            ConsumeTime = 2.0,
                            Date = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            TaskContent = "hooooooooooo",
                            TaskDayGuid = new Guid("f7d1bef4-f5d2-4e19-a22a-bceda34c5201"),
                            TaskName = "Yeah",
                            TaskSourceGuid = new Guid("6d5f7be6-e44d-4121-be95-d8216700784c"),
                            TaskTypeGuid = new Guid("b44afdaa-4c82-45a8-b0e2-9dc7017973d1")
                        },
                        new
                        {
                            Guid = new Guid("5900e184-21e7-417c-8560-ba32c0e60b44"),
                            ConsumeTime = 4.5,
                            Date = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 1,
                            TaskContent = "",
                            TaskDayGuid = new Guid("f7d1bef4-f5d2-4e19-a22a-bceda34c5201"),
                            TaskName = "",
                            TaskSourceGuid = new Guid("05d51407-4082-4746-a816-463106f68f1a"),
                            TaskTypeGuid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9")
                        },
                        new
                        {
                            Guid = new Guid("649d8897-75a6-42fa-b019-e932a351353f"),
                            ConsumeTime = 4.0,
                            Date = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 2,
                            TaskContent = "dadadadadada",
                            TaskDayGuid = new Guid("f7d1bef4-f5d2-4e19-a22a-bceda34c5201"),
                            TaskName = "FEZ",
                            TaskSourceGuid = new Guid("6d5f7be6-e44d-4121-be95-d8216700784c"),
                            TaskTypeGuid = new Guid("4f3acf7f-7cc4-4a76-bd07-7bbeabd2882a")
                        },
                        new
                        {
                            Guid = new Guid("90950112-6c55-456d-9bec-fc977f1dbff4"),
                            ConsumeTime = 1.5,
                            Date = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 3,
                            TaskContent = "cccCcccCcccC",
                            TaskDayGuid = new Guid("f7d1bef4-f5d2-4e19-a22a-bceda34c5201"),
                            TaskName = "CCCCCCCCCC",
                            TaskSourceGuid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            TaskTypeGuid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9")
                        },
                        new
                        {
                            Guid = new Guid("16e9da49-f4ff-497c-a5e5-e98c31e5ca58"),
                            ConsumeTime = 7.0,
                            Date = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            TaskContent = "",
                            TaskDayGuid = new Guid("6063bb59-a6c5-4ab5-90ed-b1e47fbe4429"),
                            TaskName = "",
                            TaskSourceGuid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            TaskTypeGuid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9")
                        },
                        new
                        {
                            Guid = new Guid("24ea4b7f-f8e2-452d-8edf-5d160524d251"),
                            ConsumeTime = 4.5,
                            Date = new DateTime(2020, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            TaskContent = "",
                            TaskDayGuid = new Guid("69af239c-2be5-4f17-8ac8-54b903b26fcc"),
                            TaskName = "",
                            TaskSourceGuid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            TaskTypeGuid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9")
                        },
                        new
                        {
                            Guid = new Guid("86191f6c-e0e5-4d57-a554-5f9531e1df3e"),
                            ConsumeTime = 3.0,
                            Date = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            TaskContent = "",
                            TaskDayGuid = new Guid("3db25699-dbb4-4887-8d78-048edf9699b2"),
                            TaskName = "",
                            TaskSourceGuid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            TaskTypeGuid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9")
                        },
                        new
                        {
                            Guid = new Guid("07bf1e95-8bb9-4561-b240-5d602160cedb"),
                            ConsumeTime = 2.0,
                            Date = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            TaskContent = "",
                            TaskDayGuid = new Guid("e41347d1-4637-4686-98f9-ee24034099ff"),
                            TaskName = "",
                            TaskSourceGuid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            TaskTypeGuid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9")
                        },
                        new
                        {
                            Guid = new Guid("9474ad51-3726-4242-87f7-903550bcbd4a"),
                            ConsumeTime = 3.0,
                            Date = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 1,
                            TaskContent = "",
                            TaskDayGuid = new Guid("e41347d1-4637-4686-98f9-ee24034099ff"),
                            TaskName = "",
                            TaskSourceGuid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            TaskTypeGuid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9")
                        },
                        new
                        {
                            Guid = new Guid("c362df5f-ab37-4638-b430-3933c84ca33e"),
                            ConsumeTime = 5.0,
                            Date = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            TaskContent = "",
                            TaskDayGuid = new Guid("5ac060a0-f33f-412e-ab3d-237927e953e1"),
                            TaskName = "",
                            TaskSourceGuid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            TaskTypeGuid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9")
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.TaskDay", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("IsLeave")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Guid");

                    b.HasIndex("UserId");

                    b.ToTable("TaskDay");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("9c903286-0816-4800-a04c-a04774f2e9d9"),
                            Date = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLeave = false,
                            UserId = 1
                        },
                        new
                        {
                            Guid = new Guid("0232dc59-fca7-415c-ab8d-354a3efe39d0"),
                            Date = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLeave = false,
                            UserId = 1
                        },
                        new
                        {
                            Guid = new Guid("f7d1bef4-f5d2-4e19-a22a-bceda34c5201"),
                            Date = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLeave = false,
                            UserId = 1
                        },
                        new
                        {
                            Guid = new Guid("6063bb59-a6c5-4ab5-90ed-b1e47fbe4429"),
                            Date = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLeave = true,
                            UserId = 1
                        },
                        new
                        {
                            Guid = new Guid("69af239c-2be5-4f17-8ac8-54b903b26fcc"),
                            Date = new DateTime(2020, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLeave = false,
                            UserId = 1
                        },
                        new
                        {
                            Guid = new Guid("d118d32e-119c-43aa-8c58-8d538dcb044a"),
                            Date = new DateTime(2020, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLeave = true,
                            UserId = 1
                        },
                        new
                        {
                            Guid = new Guid("3db25699-dbb4-4887-8d78-048edf9699b2"),
                            Date = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLeave = false,
                            UserId = 2
                        },
                        new
                        {
                            Guid = new Guid("e41347d1-4637-4686-98f9-ee24034099ff"),
                            Date = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLeave = false,
                            UserId = 2
                        },
                        new
                        {
                            Guid = new Guid("5ac060a0-f33f-412e-ab3d-237927e953e1"),
                            Date = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLeave = false,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.TaskSource", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Guid");

                    b.HasIndex("CodeName")
                        .IsUnique();

                    b.ToTable("TaskSource");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("28fce02f-146d-4bc0-8eb4-abffd63f8d12"),
                            CodeName = "default",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Guid = new Guid("05d51407-4082-4746-a816-463106f68f1a"),
                            CodeName = "Boss",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Boss",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Guid = new Guid("e4c9c211-b0b3-437e-9eb8-cf418b54d262"),
                            CodeName = "Girl friend",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Girl friend",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Guid = new Guid("6d5f7be6-e44d-4121-be95-d8216700784c"),
                            CodeName = "Father",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Father",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Guid = new Guid("dcfae46b-a036-4b30-aa6d-80e6b1535d15"),
                            CodeName = "Mother",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Mother",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.TaskTimeRange", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskContent")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("TaskDayGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("TaskSourceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Guid");

                    b.HasIndex("TaskDayGuid");

                    b.HasIndex("TaskSourceGuid");

                    b.HasIndex("TaskTypeGuid");

                    b.ToTable("TaskTimeRange");
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.TaskType", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Guid");

                    b.HasIndex("CodeName")
                        .IsUnique();

                    b.ToTable("TaskType");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("bf7a6ca5-8202-4f2c-ba1e-637d07b432c9"),
                            CodeName = "default",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Guid = new Guid("7e8aef7a-3a2d-4023-b330-17b02c6f043f"),
                            CodeName = "Coding",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Coding",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Guid = new Guid("bc9c35bc-1a57-4422-905a-278c5c96747e"),
                            CodeName = "Shopping",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Shopping",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Guid = new Guid("b44afdaa-4c82-45a8-b0e2-9dc7017973d1"),
                            CodeName = "Play Baseball",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Play Baseball",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Guid = new Guid("c74bea15-cadf-4f73-b56d-9af80676b24a"),
                            CodeName = "Wash Floors",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Wash Floors",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Guid = new Guid("533c120c-a1aa-4182-926f-943fccfc7a15"),
                            CodeName = "Reading",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Reading",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Guid = new Guid("4f3acf7f-7cc4-4a76-bd07-7bbeabd2882a"),
                            CodeName = "Play PC Game",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Play PC Game",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Auth.MapUserRole", b =>
                {
                    b.HasOne("TimeTracker.DAL.DBModels.Auth.User", "User")
                        .WithMany("MapUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTracker.DAL.DBModels.Auth.UserRole", "UserRoles")
                        .WithMany("MapUserRoles")
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.Task", b =>
                {
                    b.HasOne("TimeTracker.DAL.DBModels.Task.TaskDay", "TaskDay")
                        .WithMany("Task")
                        .HasForeignKey("TaskDayGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TimeTracker.DAL.DBModels.Task.TaskSource", "TaskSource")
                        .WithMany()
                        .HasForeignKey("TaskSourceGuid");

                    b.HasOne("TimeTracker.DAL.DBModels.Task.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeGuid");

                    b.Navigation("TaskDay");

                    b.Navigation("TaskSource");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.TaskDay", b =>
                {
                    b.HasOne("TimeTracker.DAL.DBModels.Auth.User", "User")
                        .WithMany("TaskDay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.TaskTimeRange", b =>
                {
                    b.HasOne("TimeTracker.DAL.DBModels.Task.TaskDay", "TaskDay")
                        .WithMany("TaskTimeRange")
                        .HasForeignKey("TaskDayGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TimeTracker.DAL.DBModels.Task.TaskSource", "TaskSource")
                        .WithMany()
                        .HasForeignKey("TaskSourceGuid");

                    b.HasOne("TimeTracker.DAL.DBModels.Task.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeGuid");

                    b.Navigation("TaskDay");

                    b.Navigation("TaskSource");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Auth.User", b =>
                {
                    b.Navigation("MapUserRoles");

                    b.Navigation("TaskDay");
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Auth.UserRole", b =>
                {
                    b.Navigation("MapUserRoles");
                });

            modelBuilder.Entity("TimeTracker.DAL.DBModels.Task.TaskDay", b =>
                {
                    b.Navigation("Task");

                    b.Navigation("TaskTimeRange");
                });
#pragma warning restore 612, 618
        }
    }
}
